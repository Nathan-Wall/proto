import { describe, it, assert } from '../lib/util.pr';
import { runGenericTests } from 'function-generic.pr';

async resolver(f) :{
	return this::f();
}

describe('Functions', fn :{

	runGenericTests({
		create: <%- partial('adapter-create.pr.pejs', {
			fnType: 'fn',
			retType: 'return'
		}) %>
	});

	describe('Declarations', fn :{

		describe('Dynamic `this`', fn :{

			it('hoists', fn :{

				assert.equal(foobar(4, 7), 11);

				fn foobar(a, b) :{
					assert.equal(a, 4);
					assert.equal(b, 7);
					return a + b;
				}

			});

			it('hoists when variable is defined in outer scope', fn :{

				var foobar = 1;

				:{

					assert.equal(foobar(4, 7), 11);

					fn foobar(a, b) :{
						assert.equal(a, 4);
						assert.equal(b, 7);
						return a + b;
					}

				}

			});

		});

		describe('Lexical `this`', fn :{

			it('hoists', fn ::{

				assert.equal(foobar(4, 7), 11);

				fn foobar(a, b) :{
					assert.equal(a, 4);
					assert.equal(b, 7);
					return a + b;
				}

			});

			it('hoists when variable is defined in outer scope', fn :{

				var foobar = 1;

				:{

					assert.equal(foobar(4, 7), 11);

					fn foobar(a, b) ::{
						assert.equal(a, 4);
						assert.equal(b, 7);
						return a + b;
					}

				}

			});

		});

	});

});