import { describe, it, assert } from '../../lib/util.pr';

describe('Block Expressions', fn :{

	describe('Completion Values', fn :{

			it('evaluates to the last in a series of expression statements',
				fn :{
					var x = :{
							1;
							2;
							3;
						};
					assert.equal(x, 3);
				}
			);

			it('evaluates to `try` block rather than `finally`', fn :{
				var x = :{
					1;
					try :{
						2;
					}
					finally :{
						3;
					}
				};
				assert.equal(x, 2);
			});

			it('evaluates to `catch` block when exception occurs', fn :{
				var x = :{
					1;
					try :{
						2;
						throw new Error();
						3;
					}
					catch y :{
						4;
					}
					finally :{
						5;
					}
				};
				assert.equal(x, 4);
			});

			it('evaluates to the value of the last iteration of a for loop',
				fn :{
					var x = for i of 0 .. 10: i * 5;
					assert.equal(x, 45);
				}
			);

			it('sets completion value to the value of the statement prior to '
				& 'anonymous `break`',
				fn :{
					var x = for i of 0 .. 10 :{
						if i > 5 :{
							i * 7;
							break;
						}
						i * 5;
					};
					assert.equal(x, 42);
				}
			);

			it('sets completion value to the value of the statement prior to '
				& 'anonymous `break` (B)',
				fn :{
					var x = for i of 0 .. 10 :{
						if i > 5 :{
							i * 7;
							break;
						}
					};
					assert.equal(x, 42);
				}
			);

			it('sets completion value to the value of the statement prior to '
				& 'named `break`',
				fn :{
					var x = :foo for i of 0 .. 10 :{
						for j of 0 .. 10 :{
							if i > 5 :{
								i * 7;
								break foo;
							}
							i * 5;
						}
					};
					assert.equal(x, 42);
				}
			);

	});

});