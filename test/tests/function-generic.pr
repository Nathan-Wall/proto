import { describe, it, assert } from '../lib/util.pr';

fn testProps(f) :{

	f = f.function;

	it('has a #name property set correctly', fn :{
		assert.equal(f.name, 'foo');
	});

	it('does not permit writing to #name', fn :{
		assert.throws(fn :{
			f.name = 'bar';
		});
	});

	it('does not permit configuring #name', fn :{
		assert.throws(fn :{
			reflect.configure(f, 'name', #{
				value: 'bar'
			});
		});
	});

	it('has an #arity property set correctly', fn :{
		assert.equal(f.arity, 2);
	});

	it('does not permit writing to #arity', fn :{
		assert.throws(fn :{
			f.arity = 8;
		});
	});

	it('does not permit configuring #arity', fn :{
		assert.throws(fn :{
			reflect.define(f, 'arity', #{
				value: 8
			});
		});
	});

}

fn runGenericTests(adapter) :{

	describe('Declarations', fn :{

		describe('Dynamic `this`', fn :{

			it('declares functions with dynamic this', async :{

				var foo = adapter.create(false).resolve,
					x = { foo };

				assert.equal(await foo(), nil);
				assert.equal(await x.foo(), x);
				assert.equal(await x::foo(), x);
				assert.equal(await 4::foo(), 4);

			});

			testProps(adapter.create(false));
			describe('#arity configured with `of`', fn :{
				testProps(adapter.create(false, 2));
			});

			// TODO: test hoisting
			// TODO: test block scope

		});

		describe('Lexical `this`', fn :{

			it('declares functions with lexical this', async :{

				var foo = this::adapter.create(true).resolve,
					x = { foo };

				assert.equal(await foo(), this);
				assert.equal(await x.foo(), this);
				assert.equal(await x::foo(), this);
				assert.equal(await 4::foo(), this);

				var y = {
					getBar: fn :{
						return this::adapter.create(true).resolve;
					}
				};
				var bar = y.getBar();
	
				x.bar = bar;

				assert.equal(await bar(), y);
				assert.equal(await x.bar(), y);
				assert.equal(await x::bar(), y);
				assert.equal(await 4::bar(), y);

			});

			testProps(adapter.create(true));
			describe('#arity configured with `of`', fn :{
				testProps(adapter.create(true, 2));
			});

		});

	});

}

export { runGenericTests };