import { describe, it, assert } from '../lib/util.proto';

describe('Async Functions', fn :{

	it('resolves to the correct value', async :{

		async foo :{
			return 5;
		}

		async bar :{
			return 'bam';
		}

		assert.strictEqual(await foo(), 5);
		assert.strictEqual(await bar(), 'bam');

	});

	it('DEBUG', async :{

		async foo :{
			throw 'a';
		}

		var a = await (async :{
			var x;
			try :{
				await foo();
			}
			catch e :{
				console.log(1, e);
			}
			try :{
				console.log(1.5);
				await foo();
			}
			catch e :{
				console.log(2, e);
			}
			console.log('r');
			return 22;
		})();
		console.log(a);

	});

	it('propagates exceptions', async :{

		try :{
			await (async :{
				throw 'foo';
			})();
		}
		catch e :{
			assert.equal(e, 'foo');
			return;
		}

		throw new Error('Expected exception');

	});

	it('always runs asynchronously', async :{
		var x = 0,
			y = (async :{
				x = 1;
			})();
		assert.equal(x, 0);
		await y;
		assert.equal(x, 1);
	});

	it('implies arity', async :{

		async f1 :{ }
		async f2() :{ }
		async f3(a) :{ }
		async f4(a, b) :{ }
		async f5(a, b, c) :{ }
		async f6(a, b, c, ...d) :{ }
		async f7(a, b = 'foo') :{ }
		async f8({ a, b }, c) :{ }

		assert.strictEqual(f1.arity, 0);
		assert.strictEqual(f2.arity, 0);
		assert.strictEqual(f3.arity, 1);
		assert.strictEqual(f4.arity, 2);
		assert.strictEqual(f5.arity, 3);
		assert.strictEqual(f6.arity, 3);
		assert.strictEqual(f7.arity, 1);
		assert.strictEqual(f8.arity, 2);

	});

	it('does not permit writing to #arity', fn :{
		async f :{ }
		assert.throws(fn :{
			f.arity = 8;
		});
	});

	it('does not permit configuring #arity', fn :{
		async f :{ }
		assert.throws(fn :{
			reflect.define(f, 'arity', #{
				value: 8
			});
		});
	});

});