import { describe, it, assert } from '../lib/util.pr';
import Promise from '@proto:Promise';
import { runGenericTests } from 'function-generic.pr';

describe('Async Functions', fn :{

	async resolver(f) :{
		return this::f();
	}

	runGenericTests({

		create: fn(lexicalThis | boolean, arity) :{
			var f;
			if lexicalThis :{
				if arity == nil:
					f = async foo(a, b) ::{ return this; };
				else
					f = async foo(a, b) of arity ::{ return this; };
			}
			else :{
				if arity == nil:
					f = async foo(a, b) :{ return this; };
				else
					f = async foo(a, b) of arity :{ return this; };
			}
			return {
				function: f,
				resolve: resolver:(f)
			};
		}

	});

	it('resolves to the correct value', async :{

		async foo :{
			return 5;
		}

		async bar :{
			return 'bam';
		}

		assert.equal(await foo(), 5);
		assert.equal(await bar(), 'bam');

	});

	it('propagates exceptions', async :{

		try :{
			await (async :{
				throw 'foo';
			})();
		}
		catch e :{
			assert.equal(e, 'foo');
			return;
		}

		throw new Error('Expected exception');

	});

	it('propagates exceptions (two-level)', async :{

		try :{
			await (async() :{
				await (async :{
					throw 'foo';
				})();
			})();
		}
		catch e :{
			assert.equal(e, 'foo');
			return;
		}

		throw new Error('Expected exception');

	});

	it('runs initial invocation asynchronously', async :{
		var x = 0,
			y = (async :{
				x = 1;
			})();
		assert.equal(x, 0);
		await y;
		assert.equal(x, 1);
	});

	it('returns from await asynchronously', async :{

		var x = 0;

		fn timerEnded :{
			assert.equal(x, 1);
		}

		var p = new Promise(fn(res) :{
				setTimeout(fn :{
					res();
					timerEnded();
				}, 20);
			});
		
		async bar :{
			x = 1;
			await p;
			x = 2;
			var z = (async :{
				assert.equal(x, 2);
			})();
			await 'done';
			x = 3;
			await z; // Make sure wasn't rejected (no errors)
		}

		var zz = (async :{
			await p;
			assert.equal(x, 1);
		})();

		var y = bar();
		assert.equal(x, 0);

		await y;
		assert.equal(x, 3);

		await zz; // Make sure wasn't rejected (no errors)

	});

});