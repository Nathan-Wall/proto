<% /* params: fnType, retType */ %>

fn create(declaration | boolean, lexicalThis | boolean, arity) :{
	var f;
	if declaration :{
		if lexicalThis :{
			if arity == nil :{
				<%- fnType %> foo(a, b) ::{ <%- retType %> this; }
				f = foo;
			}
			else :{
				<%- fnType %> foo(a, b) of arity ::{ <%- retType %> this; }
				f = foo;
			}
		}
		else :{
			if arity == nil :{
				<%- fnType %> foo(a, b) :{ <%- retType %> this; }
				f = foo;
			}
			else :{
				<%- fnType %> foo(a, b) of arity :{ <%- retType %> this; }
				f = foo;
			}
		}

	}
	else :{
		if lexicalThis :{
			if arity == nil:
				f = <%- fnType %> foo(a, b) ::{ <%- retType %> this; };
			else:
				f = <%- fnType %> foo(a, b) of arity ::{ <%- retType %> this; };
		}
		else :{
			if arity == nil:
				f = <%- fnType %> foo(a, b) :{ <%- retType %> this; };
			else:
				f = <%- fnType %> foo(a, b) of arity :{ <%- retType %> this; };
		}
	}
	return {
		function: f,
		resolve: resolver:(f)
	};
}