import { describe, it, assert } from '../../lib/util.pr';
import Promise from '@proto:Promise';
import { runGenericTests } from 'generic.pr';

describe('Async Functions', fn :{

	async resolver(f) :{
		return this::f();
	}

	runGenericTests({
		create: <%- partial('adapter-create.pr.pejs', {
			fnType: 'async',
			retType: 'return'
		}) %>
	});

	it('resolves to the correct value', async :{

		async foo :{
			return 5;
		}

		async bar :{
			return 'bam';
		}

		assert.equal(await foo(), 5);
		assert.equal(await bar(), 'bam');

	});

	it('propagates exceptions', async :{

		try :{
			await (async :{
				throw 'foo';
			})();
		}
		catch e :{
			assert.equal(e, 'foo');
			return;
		}

		throw new Error('Expected exception');

	});

	it('propagates exceptions (two-level)', async :{

		try :{
			await (async() :{
				await (async :{
					throw 'foo';
				})();
			})();
		}
		catch e :{
			assert.equal(e, 'foo');
			return;
		}

		throw new Error('Expected exception');

	});

	it('runs initial invocation asynchronously', async :{
		var x = 0,
			y = (async :{
				x = 1;
			})();
		assert.equal(x, 0);
		await y;
		assert.equal(x, 1);
	});

	it('returns from await asynchronously', async :{

		var x = 0;

		fn timerEnded :{
			assert.equal(x, 1);
		}

		var p = new Promise(async(res) :{
				await sleep(20);
				res();
				timerEnded();
			});
		
		async bar :{
			x = 1;
			await p;
			x = 2;
			var z = (async :{
				assert.equal(x, 2);
			})();
			await 'done';
			x = 3;
			await z; // Make sure wasn't rejected (no errors)
		}

		var zz = (async :{
			await p;
			assert.equal(x, 1);
		})();

		var y = bar();
		assert.equal(x, 0);

		await y;
		assert.equal(x, 3);

		await zz; // Make sure wasn't rejected (no errors)

	});

	it('rejects with the correct value when an object is thrown (A)', async :{

		async foo :{
			throw { a: 'from foo' };
		}

		try :{
			await foo();
		}
		catch e :{
			assert.equal(e.a, 'from foo');
		}

	});

	it('rejects with the correct value when an object is thrown (B)', async :{

		async foo :{
			throw { a: 'from foo' };
		}

		async bar :{
			await foo();
		}

		try :{
			await bar();
		}
		catch e :{
			assert.equal(e.a, 'from foo');
		}

	});

	it('rejects with the correct value when an object is thrown (C)', async :{

		var resolve,
			p = new Promise(fn(res) :{
				resolve = res;
			});

		async foo :{
			throw { a: 'from foo' };
		}

		async bar :{
			await foo();
		}

		bar().catch(fn(e) :{
			try :{
				assert.equal(e.a, 'from foo');
			}
			catch e :{
				return resolve(Promise.reject(e));
			}
			resolve();
		});

		await p;

	});

});