<% /* params: property */ %>

// Many of these tests are pretty specific to one particular magic property,
// but we go ahead and run them all for all magic properties just to make sure
// things work as intended.

describe('<%- property %>', fn :{

	it('starts as nil', fn :{
		var o = { };
		assert.equal(o.<%- property %>, nil);
		assert.equal(o['<%- property %>'], nil);
		assert.equal(o#<%- property %>, nil);
		assert.equal(o#['<%- property %>'], nil);
	});

	it('starts as not in object', fn :{
		var o = { };
		assert('<%- property %>' !in o);
		assert('<%- property %>' !in #o);
		assert(!reflect.has(o, '<%- property %>'));
		assert(!reflect.hasOwn(o, '<%- property %>'));
	});

	it('starts as non-callable', fn :{
		var o = { };
		assert.throws(fn :{ o.<%- property %>(); });
		assert.throws(fn :{ o['<%- property %>'](); });
		assert.throws(fn :{ o.<%- property %>('foo'); });
		assert.throws(fn :{ o['<%- property %>']('foo'); });
		assert.throws(fn :{ o.<%- property %>('foo', fn :{ }); });
		assert.throws(fn :{ o['<%- property %>']('foo', fn :{ }); });
	});

	it('isn\'t magic in non-computed object initializer', fn :{

		var p = { foo: 1 },
			o = { <%- property %>: p };

		assert.equal(o.foo, nil);

	});

	it('isn\'t magic in computed object initializer', fn :{

		var p = { foo: 1 },
			o = { '<%- property %>': p };

		assert.equal(o.foo, nil);

	});

	it('isn\'t magic in non-computed property setter', fn :{

		var p = { foo: 1},
			o = { };

		o.<%- property %> = p;
		assert.equal(o.foo, nil);

	});

	it('isn\'t magic in computed property setter', fn :{

		var p = { foo: 1 },
			o = { };

		o['<%- property %>'] = p;
		assert.equal(o.foo, nil);

	});

	it('isn\'t magic for mixin operator', fn :{

		var p = { foo: 1 },
			o = { } := { '<%- property %>': 1 };

		assert.equal(o.foo, nil);

	});

	it('isn\'t magic in own non-computed property setter', fn :{

		var p = { foo: 1},
			o = { };

		o#<%- property %> = p;
		assert.equal(o.foo, nil);

	});

	it('isn\'t magic in own computed property setter', fn :{

		var p = { foo: 1 },
			o = { };

		o#['<%- property %>'] = p;
		assert.equal(o.foo, nil);

	});

	it('works in non-computed property getter', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1.<%- property %>, p);
		assert.equal(o2.<%- property %>, p);
		assert.equal(o3.<%- property %>, p);
		assert.equal(o4.<%- property %>, p);

	});

	it('works in computed property getter', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1['<%- property %>'], p);
		assert.equal(o2['<%- property %>'], p);
		assert.equal(o3['<%- property %>'], p);
		assert.equal(o4['<%- property %>'], p);

	});

	it('works in own non-computed property getter', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1#<%- property %>, p);
		assert.equal(o2#<%- property %>, p);
		assert.equal(o3#<%- property %>, p);
		assert.equal(o4#<%- property %>, p);

	});

	it('works in own computed property getter', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1#['<%- property %>'], p);
		assert.equal(o2#['<%- property %>'], p);
		assert.equal(o3#['<%- property %>'], p);
		assert.equal(o4#['<%- property %>'], p);

	});

	it('works in non-computed method call', fn :{

		var p = fn : 1,
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1.<%- property %>(), 1);
		assert.equal(o2.<%- property %>(), 1);
		assert.equal(o3.<%- property %>(), 1);
		assert.equal(o4.<%- property %>(), 1);

	});

	it('works in computed method call', fn :{

		var p = fn : 1,
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1['<%- property %>'](), 1);
		assert.equal(o2['<%- property %>'](), 1);
		assert.equal(o3['<%- property %>'](), 1);
		assert.equal(o4['<%- property %>'](), 1);

	});

	it('works in own non-computed method call', fn :{

		var p = fn : 1,
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1#<%- property %>(), 1);
		assert.equal(o2#<%- property %>(), 1);
		assert.equal(o3#<%- property %>(), 1);
		assert.equal(o4#<%- property %>(), 1);

	});

	it('works in own computed method call', fn :{

		var p = fn : 1,
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		assert.equal(o1#['<%- property %>'](), 1);
		assert.equal(o2#['<%- property %>'](), 1);
		assert.equal(o3#['<%- property %>'](), 1);
		assert.equal(o4#['<%- property %>'](), 1);

	});

	it('works with non-computed delete', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		delete o1.<%- property %>;
		delete o2.<%- property %>;
		delete o3.<%- property %>;
		delete o4.<%- property %>;

		assert.equal(o1.<%- property %>, nil);
		assert.equal(o2.<%- property %>, nil);
		assert.equal(o3.<%- property %>, nil);
		assert.equal(o4.<%- property %>, nil);
		assert.equal(o1['<%- property %>'], nil);
		assert.equal(o2['<%- property %>'], nil);
		assert.equal(o3['<%- property %>'], nil);
		assert.equal(o4['<%- property %>'], nil);

	});

	it('works with computed delete', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		delete o1['<%- property %>'];
		delete o2['<%- property %>'];
		delete o3['<%- property %>'];
		delete o4['<%- property %>'];

		assert.equal(o1.<%- property %>, nil);
		assert.equal(o2.<%- property %>, nil);
		assert.equal(o3.<%- property %>, nil);
		assert.equal(o4.<%- property %>, nil);
		assert.equal(o1['<%- property %>'], nil);
		assert.equal(o2['<%- property %>'], nil);
		assert.equal(o3['<%- property %>'], nil);
		assert.equal(o4['<%- property %>'], nil);

	});

	it('works with own non-computed delete', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		delete o1#<%- property %>;
		delete o2#<%- property %>;
		delete o3#<%- property %>;
		delete o4#<%- property %>;

		assert.equal(o1.<%- property %>, nil);
		assert.equal(o2.<%- property %>, nil);
		assert.equal(o3.<%- property %>, nil);
		assert.equal(o4.<%- property %>, nil);
		assert.equal(o1['<%- property %>'], nil);
		assert.equal(o2['<%- property %>'], nil);
		assert.equal(o3['<%- property %>'], nil);
		assert.equal(o4['<%- property %>'], nil);

	});

	it('works with own computed delete', fn :{

		var p = { foo: 1 },
			o1 = { <%- property %>: p },
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: p };
		o2.<%- property %> = p;
		o3['<%- property %>'] = p;

		delete o1#['<%- property %>'];
		delete o2#['<%- property %>'];
		delete o3#['<%- property %>'];
		delete o4#['<%- property %>'];

		assert.equal(o1.<%- property %>, nil);
		assert.equal(o2.<%- property %>, nil);
		assert.equal(o3.<%- property %>, nil);
		assert.equal(o4.<%- property %>, nil);
		assert.equal(o1['<%- property %>'], nil);
		assert.equal(o2['<%- property %>'], nil);
		assert.equal(o3['<%- property %>'], nil);
		assert.equal(o4['<%- property %>'], nil);

	});

	it('doesn\'t create a catch-all method', fn :{

		fn f :{
			return 1;
		}

		var o1 = { <%- property %>: f},
			o2 = { },
			o3 = { },
			o4 = { } := { <%- property %>: f };
		o2.<%- property %> = f;
		o3['<%- property %>'] = f;

		assert.throws(fn :{ o1.foo(); });
		assert.throws(fn :{ o2.foo(); });
		assert.throws(fn :{ o3.foo(); });
		assert.throws(fn :{ o4.foo(); });

	});

});
