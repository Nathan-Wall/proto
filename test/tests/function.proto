import { describe, it, assert } from '@env';

fn runGenericTests(f) :{

	it('has a #name property set correctly', fn :{
		assert.strictEqual(f.name, 'foo');
	});

	it('does not permit writing to #name', fn :{
		assert.throws(fn :{
			f.name = 'bar';
		});
	});

	it('does not permit configuring #name', fn :{
		assert.throws(fn :{
			reflect.configure(f, 'name', #{
				value: 'bar'
			});
		});
	});

	it('has an #arity property set correctly', fn :{
		assert.strictEqual(f.arity, 2);
	});

	it('does not permit writing to #arity', fn :{
		assert.throws(fn :{
			f.arity = 8;
		});
	});

	it('does not permit configuring #arity', fn :{
		assert.throws(fn :{
			reflect.define(f, 'arity', #{
				value: 8
			});
		});
	});

}

describe('Functions', fn :{

	describe('Function Declarations', fn :{

		describe('Dynamic `this`', fn :{

			it('declares functions with dynamic this', fn :{

				fn foo() :{
					return this;
				}

				var x = { foo };

				// `strictEquals` and `equals` aren't being used for these
				// assertions because:
				// 1. Our assertion library is (currently?) a JS script
				// 2. Proto objects passed to JS scripts are passed through a
				// membrane which doesn't maintain object identity.
				assert(foo() == nil);
				assert(x.foo() == x);
				assert(x::foo() == x);
				assert(4::foo() == 4);

			});

			runGenericTests(fn foo(a, b) :{ });
			describe('#arity configured with `of`', fn :{
				runGenericTests(fn foo(a) of 2 :{ });
			});

			// TODO: test hoisting
			// TODO: test block scope

		});

		describe('Lexical `this`', fn :{

			it('declares functions with lexical this', fn :{

				fn foo() ::{
					return this;
				}

				var x = { foo };

				assert.strictEqual(foo(), this);
				assert.strictEqual(x.foo(), this);
				assert.strictEqual(x::foo(), this);
				assert.strictEqual(4::foo(), this);

				var y = {
					getBar: fn :{
						return fn ::{
							return this;
						};
					}
				};
				var bar = y.getBar();
	
				x.bar = bar;

				assert(bar() == y);
				assert(x.bar() == y);
				assert(x::bar() == y);
				assert(4::bar() == y);

			});

			runGenericTests(fn foo(a, b) ::{ });
			describe('#arity configured with `of`', fn :{
				runGenericTests(fn foo(a) of 2 ::{ });
			});

		});

	});

});