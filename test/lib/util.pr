import { assert as _assert, it as _it } from '@env';

fn it(desc, callback) :{
	_it(desc, async(done) :{
		try :{ await callback(); }
		catch (x) :{
			done(x);
			return;
		}
		done();
	});
}

fn assert(t, m) :{
	return _assert(t, m);
}

assert = assert := #_assert;
delete assert.strictEqual;

assert.equal = fn(a, b, m) :{
	return assert(a == b,
		m ?? 'Expected ' & JSON.stringify(a) & ' to equal ' & JSON.stringify(b)
	);
};

assert.deepEqual = fn(a, b, m) :{
	if m == nil:
		m = 'Expected ' & JSON.stringify(a)
			& ' to deeply equal ' & JSON.stringify(b);
	var keys = reflect.keys(a);
	assert.equal(keys.length, reflect.keys(b).length, m);
	for key of keys :{
		var aValue = a[key],
			bValue = b[key];
		assert.equal(typeof aValue, typeof bValue, m);
		if typeof aValue == 'object':
			assert.deepEqual(aValue, bValue, m);
		else:
			assert.equal(aValue, bValue, m);
	}

};

assert.property = fn(a, b, m) :{
	return assert(b in a, m ?? 'Expected property ' & b);
};

assert.notProperty = fn(a, b, m) :{
	return assert(b !in a, m ?? 'Expected no property ' & b);
};

export { it, assert };
export { describe } from '@env';