// TODO: use `this` instead of `arrayLike`

// TODO: Is Array necessary if there's a more general Iterable module?

fn push(arrayLike, ...items) :{
	var L = items.length;
	for (var i of arrayLike.length >>> 0 .. L)
		arrayLike[i] = items[i];
	// TODO: Return value?
}

// TODO: rename.. i think i want to use the name append for Function, and i'd
// like to not have overlap
fn append(arrayLike, ...items) :{
	var L = items.length;
	for (var i = arrayLike.length >>> 0; i < L; i++)
		P.Define(arrayLike, i, {
			value: items[i],
			writable: true,
			enumerable: true,
			configurable: true
		});
}

fn forEach(arrayLike, callback) :{
	if (!P.IsObject(arrayLike))
		throw new TypeError('Object expected');
	var L = arrayLike.length >>> 0;
	for (var i = 0; i < L; i++)
		callback(arrayLike[i], i);
}

fn map(arrayLike, callback) :{
	if (!P.IsObject(arrayLike))
		throw new TypeError('Object expected');
	var L = arrayLike.length >>> 0,
		mapped = [ ];
	for (var i = 0; i < L; i++)
		mapped::append(callback(arrayLike[i], i));
	return mapped;
}

Array := {
	forEach, map
};