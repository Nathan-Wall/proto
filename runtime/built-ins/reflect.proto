fn getDescriptor(obj, key) :{
	return P.GetDescriptor(obj, key);
}

fn getOwnDescriptor(obj, key) :{
	return P.GetOwnDescriptor(obj, key);
}

fn has(obj, key) :{
	// TODO: make sure in operator calls ToString() on left operand and converts
	// right operand to JS object
	return key in obj;
}

fn hasOwn(obj, key) :{
	return P.HasOwn(obj, key);
}

fn isCallable(value) :{
	return P.IsCallable(value);
}

fn keys(value) :{
	// TODO: make shortcut in transpiler for this form and the #{ } form, for
	// performance
	var k = #[ ],
		ks,
		p = value,
		i = 0;
	// TODO: Can the `do` be removed from the do..while loop? Bad idea?
	do :{
		ks = P.GetOwnKeys(p);
		for (var j = 0; j < ks.length; j++)
			k[i++] = ks[j];
	} while (p = P.GetPrototype(p));
	k.length = i;
	return P.CreateArray(Array, k);
}

fn ownKeys(value) :{
	return P.GetOwnKeys(value);
}

fn isObject(value) :{
	return P.IsObject(value);
}

reflect := {
	getDescriptor, getOwnDescriptor, has, hasOwn, isCallable,
	keys, ownKeys, isObject
};